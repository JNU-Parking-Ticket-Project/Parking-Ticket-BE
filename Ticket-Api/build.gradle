plugins {
    id 'java'
    id 'com.google.cloud.tools.jib' version '3.4.0'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.jnu'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

configurations {
    asciidoctorExtensions
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    implementation group: 'software.amazon.awssdk', name: 'ses', version: "2.19.29"
    implementation group: 'org.apache.poi', name: 'poi', version: '5.2.3'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.3'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation project(':Ticket-Domain')
    implementation project(':Ticket-Common')
    implementation project(':Ticket-Infrastructure')
    implementation project(':Ticket-Batch')
}


jib {
    def serverPort = "8080"
    def dockerUsername = System.getenv("DOCKER_USERNAME")
    def dockerPassword = System.getenv("DOCKER_PASSWORD")
    def imageName = System.getenv("IMAGE_NAME")
    def imageTag = System.getenv("IMAGE_TAG")

    from {
        image = 'amazoncorretto:17-alpine3.17-jdk'
    }
    to {
        image = imageName + ":latest" // docker image
        tags = ['latest', imageTag] // docker tag ('latest'와 'github-action으로 받은 태그' 모두에 업로드)
        auth { // docker auth
            username = dockerUsername ? dockerUsername : ""
            password = dockerPassword ? dockerPassword : ""
        }
    }
    container {
        jvmFlags = [
                '-Dspring.profiles.active=prod',
                '-Dserver.port=' + serverPort,
                '-Xms2G', '-Xmx2G',
                '-XX:+UseG1GC',
                '-XX:+UseContainerSupport',
                '-XX:+DisableExplicitGC',
                '-server'
        ]
        environment = [
                'MYSQL_HOST'    : System.getenv("MYSQL_HOST"),
                'MYSQL_PORT'    : System.getenv("MYSQL_PORT"),
                'MYSQL_DATABASE': System.getenv("MYSQL_DATABASE"),
                'MYSQL_USERNAME': System.getenv("MYSQL_USERNAME"),
                'MYSQL_PASSWORD': System.getenv("MYSQL_PASSWORD"),
                'JWT_SECRET'    : System.getenv("JWT_SECRET"),
                'AWS_SES_ACCESS_KEY': System.getenv("AWS_SES_ACCESS_KEY"),
                'AWS_SES_SECRET_KEY': System.getenv("AWS_SES_SECRET_KEY"),
                'AWS_SES_REGION': System.getenv("AWS_SES_REGION"),
                'AWS_SES_SEND_MAIL_ADDRESS': System.getenv("AWS_SES_SEND_MAIL_ADDRESS")
        ]
        ports = ['8080']
    }

    ext {
        // snippetsDir : 테스트 실행시 생성되는 응답을 저장할 디렉토리 지정
        set('snippetsDir', file("build/generated-snippets"))
    }

// === ⭐ Spring Rest Docs ===
    tasks.named('test') {
        systemProperty 'file.encoding', 'UTF-8'
        outputs.dir snippetsDir
        useJUnitPlatform()
    }

// (7) asciidoctor를 사용하기 위해서 asciidoctor task에 asciidoctorExtensions 설정
    tasks.named('asciidoctor') {
        configurations "asciidoctorExtensions"
        inputs.dir snippetsDir
        dependsOn test
    }

// (8) asciidoctor task 실행시 생성된 html 파일을 src/main/resources/static/docs 디렉토리에 카피
    task copyDocument(type: Copy) {
        dependsOn asciidoctor            // (8-1)
        from file("${asciidoctor.outputDir}")   // (8-2)
        into file("src/main/resources/static/docs")   // (8-3)
    }

    build {
        dependsOn copyDocument  // (9) 빌드되기전 copyDocument task 실행
    }

// (10)
    bootJar {
        dependsOn copyDocument    // (10-1) bootJar 실행되기전 copyDocument task 실행
        from("${asciidoctor.outputDir}") {  // (10-2) bootJar에 asciidoctor task에서 생성된 html 파일 추가
            into 'static/docs'     // (10-3) bootJar에 추가될 경로
        }

    }

    bootJar.enabled = false
    jar.enabled = true
}