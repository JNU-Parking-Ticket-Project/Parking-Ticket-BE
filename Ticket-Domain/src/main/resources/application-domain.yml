spring:
  datasource:
    url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:ticket}?useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true&tinyInt1isBit=false
    username: ${DATASOURCE_USERNAME:root}
    password: ${DATASOURCE_PASSWORD:}
    #    driver-class-name: ${DATASOURCE_DRIVER:org.h2.Driver}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maxLifetime: 580000
      maximum-pool-size: 20
  jpa:
    hibernate:
      ddl-auto: create-drop
    generate-ddl: true
    show-sql: ${SHOW_SQL:true}
    properties:
      hibernate:
        #        format_sql: ${FORMAT_SQL:true}
        default_batch_fetch_size: ${JPA_BATCH_FETCH_SIZE:100}
  batch:
    sql:
      init:
        mode: always
        continue-on-error: false
    open-in-view: false
    database-platform: org.hibernate.dialect.MySQL8Dialect
    #     script 파일이 hibernate 초기화 이후 동작하게 하기 위한 옵션
    defer-datasource-initialization: false
    jdbc:
      initialize-schema: always


  quartz:
    job-store-type: jdbc  # Quartz가 메모리가 아닌 DB에 Job/Trigger 저장
    jdbc:
      initialize-schema: always # 스키마 자동 생성 비활성화 (한번만 수동으로 생성)
      properties:
        org:
          quartz:
            scheduler:
              instanceName: QuartzScheduler
              instanceId: AUTO
            jobStore:
              class: org.quartz.impl.jdbcjobstore.JobStoreTX  # Transactional JobStore 설정
              driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
              isClustered: true  # 클러스터링 지원 (필요한 경우)
              tablePrefix: QRTZ_  # 테이블 접두사 (기본값)
              useProperties: false

thread:
  core-pool-size: ${THREAD_CORE_POOL_SIZE:10}
  max-pool-size: ${THREAD_MAX_POOL_SIZE:20}
  queue-capacity: ${THREAD_QUEUE_CAPACITY:100}

logging:
  level:
    root: ${LOGGING_LEVEL:ERROR}

    org.springframework.orm.jpa: ${LOGGING_LEVEL:DEBUG}
    org.springframework.transaction: ${LOGGING_LEVEL:DEBUG}
    org.springframework.aop: ${LOGGING_LEVEL:DEBUG}
    org.springframework.orm.jpa.JpaTransactionManager: ${LOGGING_LEVEL:INFO}
    # HikariCP
    com.zaxxer.hikari.HikariConfig: ${LOGGING_LEVEL:DEBUG}
    com.zaxxer.hikari: ERROR
    org.hibernate:
      SQL: ${LOGGING_LEVEL:INFO}
      type.descriptor.sql.BasicBinder: ${LOGGING_LEVEL:INFO}


ableEventLock: true
ableRedis: ${ABLE_REDIS:true}
ableRedisson: ${ABLE_REDISSON:true}

management:
  health:
    redis:
      enabled: ${ABLE_REDIS:true}
---

spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:~/test;DB_CLOSE_DELAY=-1;MODE=MySQL;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
  jpa:
    show-sql: true
  h2:
    console:
      enabled: true
      path: /h2-console

---

spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:econovation}?useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true&tinyInt1isBit=false
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maxLifetime: 580000
      maximum-pool-size: 20
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
  jpa:
    generate-ddl: true
    properties:
      hibernate:
        default_batch_fetch_size: ${JPA_BATCH_FETCH_SIZE:100}
    hibernate:
      ddl-auto: validate
    database-platform: org.hibernate.dialect.MySQL8Dialect

  quartz:
    job-store-type: jdbc  # Quartz가 메모리가 아닌 DB에 Job/Trigger 저장
    jdbc:
      initialize-schema: never # 스키마 자동 생성 비활성화 (한번만 수동으로 생성)
      properties:
        org:
          quartz:
            scheduler:
              instanceName: QuartzScheduler
              instanceId: AUTO
            jobStore:
              class: org.quartz.impl.jdbcjobstore.JobStoreTX  # Transactional JobStore 설정
              driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
              isClustered: true  # 클러스터링 지원 (필요한 경우)
              tablePrefix: QRTZ_  # 테이블 접두사 (기본값)
              useProperties: false

logging:
  level:
    org.springframework.orm.jpa: DEBUG
    org.springframework.transaction: DEBUG

ableEventLock: true
ableRedis: ${ABLE_REDIS:true}
ableRedisson: ${ABLE_REDISSON:true}

management:
  health:
    redis:
      enabled: ${ABLE_REDIS:true}

---

spring:
  config:
    activate:
      on-profile: prod

  datasource:
    url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}?useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true&tinyInt1isBit=false
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maxLifetime: 580000
      maximum-pool-size: ${HIKARI_MAXIMUM_POOL_SIZE:60}
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
  jpa:
    properties:
      hibernate:
        default_batch_fetch_size: ${JPA_BATCH_FETCH_SIZE:100}
        show_sql: false
        format_sql: false
    hibernate:
      ddl-auto: validate
    database-platform: org.hibernate.dialect.MySQL8Dialect

  quartz:
    job-store-type: jdbc  # Quartz가 메모리가 아닌 DB에 Job/Trigger 저장
    jdbc:
      initialize-schema: never # 스키마 자동 생성 비활성화 (한번만 수동으로 생성)
      properties:
        org:
          quartz:
            scheduler:
              instanceName: QuartzScheduler
              instanceId: AUTO
            jobStore:
              class: org.quartz.impl.jdbcjobstore.JobStoreTX  # Transactional JobStore 설정
              driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
              isClustered: true  # 클러스터링 지원 (필요한 경우)
              tablePrefix: QRTZ_  # 테이블 접두사 (기본값)
              useProperties: false

thread:
  core-pool-size: ${THREAD_CORE_POOL_SIZE:10}
  max-pool-size: ${THREAD_MAX_POOL_SIZE:20}
  queue-capacity: ${THREAD_QUEUE_CAPACITY:100}

logging:
  level:
    root: ${LOGGING_LEVEL:debug}
ableEventLock: true
ableRedis: ${ABLE_REDIS:true}
ableRedisson: ${ABLE_REDISSON:true}

management:
  health:
    redis:
      enabled: ${ABLE_REDIS:true}

